package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {
	
	/*
	 * 1. 객체 지향 언어 : "객체"를 지향하는 언어 (즉, 객체 중심으로 돌아가는 언어)
	 * 
	 * 2. 객체 : 사전적의미로 현실세계에 존재하는 독립적인 존재(목적이있고, 의미있는) (무형, 유형, 개념, 사물...)
	 * 
	 * 3. 객체지향 프로그래밍 : 즉, 현실세계에 어떤 독립적인 존재들(객체)간의 상호작용 --> 프로그래밍을 통해 가상세계(코드)로 구현하는 과정
	 * 
	 * 4. 구현하고자 하는 프로그램 상의 필요한 객체들을 만들기 위해서 (즉, 생성하기 위해서) : 클래스(각 객체들의 속성(정보)들을 담아낼 그릇)라는 틀을 먼저 만들어야된다.
	 * 							클래스는 어떻게 ?? --> 추상화 + 캡슐화
	 * 
	 * 5. 추상화 과정
	 * 		1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각 
	 * 		2) 그 객체들이 가지고있는 공통적인 속성들을 추출 (100개 됐든 200개가 됐든)
	 * 		3) 그렇게 추출된 것들을 가지고 내가 구현하고자 하는 프로그램 "실질적인 목적"에 맞춰서 불필요한 속성 제거해나가는 과정
	 * 		4) 최종적으로 선정된 속성들을 가지고 어떤자료형으로, 어떤 변수명으로 사용할건지 생각
	 * 
	 * 		ex) 학생관리 프로그램
	 * 			1) 학생관련객체 (홍길동, 김말똥, 김영희, ..... )
	 * 
	 * 			2) 이름, 나이, 주소, 전화번호, 키, 달리기 속도, 학년, 반, 국어점수, 영어점수, 수학점수, 몸무게, 머리색깔, 발사이즈, ...
	 * 
	 * 			3) 학생 "인적사항"관리 프로그램 : 이름, 나이, 주소, 전화번호, 학년, 반 
	 * 			      학생 "성적"관리 프로그램 : 이름, 학년, 반, 국어점수, 영어점수, 수학점수 
	 * 			      학생 "건강"관리 프로그램 : 이름, 키, 달리기속도, 학년, 반, 몸무게
	 * 
	 * 			      학생과 관련된 프로그램 : 이름, 나이, 키
	 * 
	 * 			4) 이름 --> String name;
	 * 			      나이 --> int age;
	 * 			        키  --> double height;
	 * 
	 * 6. 위에서 선정된것들을 가지고 본격적으로 프로그래밍 시작!!
	 * 		
	 * 		1) "변수"만을 가지고 프로그램을 구현하게된다면?
	 * 
	 * 			* 변수 - 하나의 자료형, 하나의 값
	 * 
	 * 			홍길동이라는 객체를 만들기 위해서 --> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
	 * 			김말똥이라는 객체를 만들기 위해서 --> String name2 = "김말똥"; int age2 = 21; double height2 = 173.4;
	 * 			김영희  라는 객체를 만들기 위해서  --> String name3 = "김영희"; int age3 = 22; double height3 = 182.7;
	 * 				... 
	 * 
	 * 			어떤문제발생? --> 수백명일 경우 --> 수천개의 변수들이 만들어짐.. 관리하기 어려움.. 
	 * 
	 * 		2) "배열"로 프로그램을 구현한다고 생각
	 * 
	 * 			* 배열 - 하나의 자료형, 여러개의 값
	 * 
	 * 			학생들의 이름들을 보관하는 String[] name = {"홍길동", "김말똥", "김영희", ... };
	 * 			학생들의 나이들을 보관하는       int[] age  = {   20  ,   21  ,   22   , ... };
	 * 			학생들의 키들을 보관하는  double[] height= { 162.3 , 173.4,  182.7 , ... };
	 * 
	 * 			어떤문제발생? --> 한명이 전학갔을 경우 --> 해당 학생의 인덱스들 찾아서 지워줘야되는데 하나라도 누락됐을 경우 문제야기!!
	 * 
	 *  	3) 구조체 개념 (위의 배열들을 세로로 한줄씩 묶는다고 생각)
	 *  
	 *  		* 구조체 - 여러개의 자료형, 여러개의 값	
	 *  		
	 *  		String값도 보관하고, int값도 보관하고, double값도 보관할 수 있는 나만의 자료형을 만들자!! => 클래스(사용자정의자료형)
	 * 			
	 * 			Student "클래스"를 만들어서 그안에 "필드"로 String name; int age; double height;
	 */
	
	public static void main(String[] args) {
		/*
		String name1 = "홍길동";
		int age1 = 20;
		double height1 = 162.3;
		
		String name2 = "김말똥";
		int age2 = 22;
		double height2 = 175.3;
		*/
		
		/*
		String[] name = {"홍길동", "김말똥", "김영희"};
		*/
		
		int[] arr = new int[5];
		arr[0] = 1;
		
		// Student 클래스를 가지고 객체 찍어내보기
		Student hong = new Student();
		
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 162.3;
		
		// xxx님은 xx살이고, 키는 xxxcm입니다.
		System.out.println(hong.name + "님은 " 
						+ hong.age + "살이고, 키는"
						+ hong.height + "cm입니다.");
		
		
		Student ddong = new Student();
		ddong.name = "김말똥";
		ddong.age = 21;
		ddong.height = 175.3;
		
		System.out.println(ddong.name + "님은 "
						  + ddong.age + "살이고, 키는"
						  + ddong.height + "cm입니다.");
		
		// 직접 접근해서 작업하게 되면 --> 외부에서 악의적인 마음을 가지고 값을 변경할 수 있고 쉽게 정보가 노출되서도 안됨!!
		// --> 캡슐화 작업해야됨!! --> 객체지향설계원칙 중에 "정보은닉"
	}

}






